<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Category;
use Illuminate\Support\Facades\File;

class ProductController extends Controller
{

    public function index()
    {
        $products = Product::orderBy('id', 'asc')->get();
        return view('product.index', compact('products'));
    }

    public function create()
    {
        $categories = Category::Orderby('id', 'desc')->get();
        return view('product.create', compact('categories'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|max:255|unique:products',
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer',
        ]);
        $product = new Product;
        $product->title = $request->title;
        $product->description = $request->description;
        $product->is_active = $request->is_active ? $request->is_active : 0;
        $product->category_id = $request->category_id;
        $image = $request->file('image');
        if ($image) {
            $slug = Str::slug($request->title);
            $imageName = $slug.'.'.$image->getClientOriginalExtension();
            $image->move(public_path('product-images'), $imageName);
        }
        $product->image = $imageName;
        $product->save();

        return redirect(route('products.index'))->with('success', 'Product Created Successfully.');;
    }

    public function edit($id)
    {
      $product = Product::findOrFail($id);
      $categories = Category::Orderby('id', 'desc')->get();
      return view('product.edit', compact('product', 'categories'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'title' => 'required|max:255|unique:products,title,'.$id,
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer'
        ]);
        $product = Product::findOrFail($id);
        $product->title = $request->title;
        $product->description = $request->description;
        $product->is_active = $request->is_active ? $request->is_active : 0;
        $product->category_id = $request->category_id;
        $image = $request->file('image');

        $pslug = Str::slug($product->title);
        $reqslug = Str::slug($request->title);

        if( $pslug != $reqslug ) {
            if(!empty($image)){
                if($product->image !== null){
                    File::delete([public_path('product-images/'. $product->image)]);
                }
                $slug = Str::slug($request->title);
                $imageName = $slug.'.'.$image->getClientOriginalExtension();
                $image->move(public_path('product-images'), $imageName);
            }
            elseif($product->image !== null){
                $path_info = pathinfo(public_path('product-images/'. $product->image));
                $getExt = $path_info['extension'];
                $imageName = $reqslug.".".$getExt;
                $currentPath = (public_path('sproduct-images/'. $product->image));
                $newPath = (public_path('product-images/'. $imageName));
                File::move($currentPath, $newPath);
            }
            else{
                $imageName = $product->image;
            }
            $product->image = $imageName;
            $product->update();
        }
        else{
            $product->image = $product->image;
            $product->update();
        }



        return redirect(route('products.index'))->with('success', 'Product Updated Successfully.');
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);
        File::delete([public_path('product-images/'. $product->image)]);
        $product->delete();
        return redirect(route('products.index'))->with('success', 'Product Deleted Successfully.');
    }
}




<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Category;
use Illuminate\Support\Facades\File;

class ProductController extends Controller
{

    public function index()
    {
        $products = Product::orderBy('id', 'asc')->get();
        return view('product.index', compact('products'));
    }

    public function create()
    {
        $categories = Category::Orderby('id', 'desc')->get();
        return view('product.create', compact('categories'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|max:255|unique:products',
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer',
        ]);
        $product = new Product;
        $product->title = $request->title;
        $product->description = $request->description;
        $product->is_active = $request->is_active ? $request->is_active : 0;
        $product->category_id = $request->category_id;
        $image = $request->file('image');
        if ($image) {
            $slug = Str::slug($request->title);
            $imageName = $slug.'.'.$image->getClientOriginalExtension();
            $image->move(public_path('product-images'), $imageName);
        }
        $product->image = $imageName;
        $product->save();

        return redirect(route('products.index'))->with('success', 'Product Created Successfully.');;
    }

    public function edit($id)
    {
      $product = Product::findOrFail($id);
      $categories = Category::Orderby('id', 'desc')->get();
      return view('product.edit', compact('product', 'categories'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'title' => 'required|max:255|unique:products,title,'.$id,
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer'
        ]);
        $product = Product::findOrFail($id);
        $product->title = $request->title;
        $product->description = $request->description;
        $product->is_active = $request->is_active ? $request->is_active : 0;
        $product->category_id = $request->category_id;
        $image = $request->file('image');
        $slug = Str::slug($request->title);
        dd($product->title);

        if($request->title !== $product->title){
            dd('change');
            if (!empty($image)) {
                if($product->image !== null){
                    File::delete([public_path('product-images/'. $product->image)]);
                }
                $imageName = $slug.'.'.$image->getClientOriginalExtension();
                $image->move(public_path('product-images'), $imageName);
            }
            elseif($product->image != null) {
                $path_info = pathinfo(public_path('product-images/'. $product->image));
                $getExt = $path_info['extension'];
                $imageName = $slug.".".$getExt;
                $currentPath = (public_path('product-images/'. $porudct->image));
                $newPath = (public_path('product-images/'. $imageName));
                File::move($currentPath, $newPath);
            }
            else{
                $imageName = $product->image;
            }
        }
        else{
            if (!empty($image)) {
                if($product->image !== null){
                    File::delete([public_path('product-images/'. $product->image)]);
                }
                $imageName = $slug.'.'.$image->getClientOriginalExtension();
                $image->move(public_path('product-images'), $imageName);
            }
            else{
                $imageName = $product->image;
            }
        }

        $product->image = $imageName;
        //$product->update();

        return redirect(route('products.index'))->with('success', 'Product Updated Successfully.');
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);
        File::delete([public_path('product-images/'. $product->image)]);
        $product->delete();
        return redirect(route('products.index'))->with('success', 'Product Deleted Successfully.');
    }
}


<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateProductsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->bigInteger('category_id')->unsigned()->nullable();

            $table->string('title', 100);
            $table->text('description')->nullable();
            $table->string('image', 100)->nullable();

            $table->boolean('is_active')->default(1);
            $table->timestamps();


            $table->foreign('category_id')->references('id')->on('categories')->onUpdate('cascade')
            ->onDelete('restrict');

            $table->unique(['category_id', 'name'], 'unique_identifier');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('products');
    }
}



<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Category;
use Illuminate\Support\Facades\File;

class ProductController extends Controller
{

    public function index()
    {
        $products = Product::orderBy('id', 'asc')->get();
        return view('product.index', compact('products'));
    }

    public function create()
    {
        $categories = Category::Orderby('id', 'desc')->get();
        return view('product.create', compact('categories'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|max:255',
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer',
        ]);

        try{
            $product = new Product;
            $product->title = $request->title;
            $product->description = $request->description;
            $product->is_active = $request->is_active ? $request->is_active : 0;
            $product->category_id = $request->category_id;
            $image = $request->file('image');
            if ($image) {
                $imageName = date("dmYhis").'.'.$image->getClientOriginalExtension();
                $image->move(public_path('product-images'), $imageName);
            }
            $product->image = $imageName;

            $product->save();
        }

        catch (Illuminate\Database\QueryException $e){
            $errorCode = $e->errorInfo[1];
            if($errorCode == 1062){

            }
        }

        return redirect(route('products.index'))->with('success', 'Product Created Successfully.');
    }

    public function edit($id)
    {
      $product = Product::findOrFail($id);
      $categories = Category::Orderby('id', 'desc')->get();
      return view('product.edit', compact('product', 'categories'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'title' => 'required|max:255',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'description' => 'required',
            'category_id' => 'required|integer'
        ]);
        $product = Product::findOrFail($id);
        $product->title = $request->title;
        $product->description = $request->description;
        $product->is_active = $request->is_active ? $request->is_active : 0;
        $product->category_id = $request->category_id;
        $image = $request->file('image');
        if ($image) {
            if($product->image !== null){
                File::delete([public_path('product-images/'. $product->image)]);
            }
            $imageName = date("dmYhis").'.'.$image->getClientOriginalExtension();
            $image->move(public_path('product-images'), $imageName);
        }
        else{
            $imageName = $product->image;
        }

        $product->image = $imageName;

        $check_product = Product::where('title', '=', $request->title)->where('id','!=', $id)->exists();
        $check_cat = Product::where('title', '=', $request->title)->where('category_id', '=', $request->category_id)->where('id','!=', $id)->exists();

        if($check_product == true && $check_cat == true){
            return redirect()->back()->withErrors('Title and Category are same not allow');
        }
        else{
            $product->update();
        }

        return redirect(route('products.index'))->with('success', 'Product Updated Successfully.');
    }

    public function destroy($id)
    {
        $product = Product::findOrFail($id);
        File::delete([public_path('product-images/'. $product->image)]);
        $product->delete();
        return redirect(route('products.index'))->with('success', 'Product Deleted Successfully.');
    }
}
